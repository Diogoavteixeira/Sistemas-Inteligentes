import keyboard  # Biblioteca para capturar teclas (para modo manual)
import os  # Usado para limpar o terminal
import sys  # Usado para saÃ­da do programa
import heapq  # Estrutura de heap para a busca A*
from collections import deque  # Fila dupla usada no BFS

class EightPuzzle:
    def __init__(self):
        print("ConfiguraÃ§Ã£o inicial:")
        self.board = self.ler_config("inicial")  # LÃª a configuraÃ§Ã£o inicial do tabuleiro
        print("\nTabuleiro inicial:\n")
        self.mostrar_tabuleiro()
        
        print("ConfiguraÃ§Ã£o final (objetivo):")
        self.target_board = self.ler_config("final")  # LÃª a configuraÃ§Ã£o final do tabuleiro
        print("\nTabuleiro final (objetivo):\n")
        self.mostrar_tabuleiro_custom(self.target_board)
        
        # Verifica se o puzzle Ã© solucionÃ¡vel
        if not self.is_solvable(self.board, self.target_board):
            print("O puzzle nÃ£o Ã© solucionÃ¡vel com a configuraÃ§Ã£o final dada!")
            sys.exit(1)  # Encerra o programa se o puzzle nÃ£o puder ser resolvido
            
        self.moves = 0  # Contador de movimentos

    def ler_config(self, tipo):
        """
        LÃª uma configuraÃ§Ã£o do tabuleiro.
        O utilizador introduz 9 nÃºmeros Ãºnicos entre 0 e 8, onde 0 representa o espaÃ§o vazio.
        """
        print(f"Introduza 9 nÃºmeros Ãºnicos entre 0 e 8 para a configuraÃ§Ã£o {tipo}:")
        numeros_validos = set(range(0, 9))  # Conjunto de nÃºmeros permitidos
        numeros_usados = set()  # Conjunto para evitar repetiÃ§Ã£o de nÃºmeros
        tabuleiro = []

        for i in range(3):
            while True:
                try:
                    linha = list(map(int, input(f"Linha {i+1}: ").split()))  # LÃª e converte a entrada em lista de inteiros
                    if len(linha) != 3:
                        print("Erro: Deve introduzir exatamente 3 nÃºmeros.")
                        continue
                    if not all(num in numeros_validos for num in linha):
                        print("Erro: Apenas nÃºmeros de 0 a 8 sÃ£o permitidos.")
                        continue
                    if any(num in numeros_usados for num in linha):
                        print("Erro: NÃ£o pode repetir nÃºmeros no tabuleiro.")
                        continue
                    tabuleiro.append(linha)
                    numeros_usados.update(linha)
                    break
                except ValueError:
                    print("Erro: Introduza apenas nÃºmeros inteiros separados por espaÃ§o.")
        return tabuleiro

    def mostrar_tabuleiro_custom(self, board):
        """Mostra um tabuleiro fornecido."""
        os.system('cls' if os.name == 'nt' else 'clear')  # Limpa a tela
        for row in board:
            print(" ".join(str(num) if num != 0 else " " for num in row))  # Exibe o tabuleiro
        print("\n")
    
    def mostrar_tabuleiro(self):
        """Mostra o tabuleiro atual."""
        self.mostrar_tabuleiro_custom(self.board)

    def flatten(self, board):
        """Converte o tabuleiro numa lista ignorando o 0."""
        return [num for row in board for num in row if num != 0]

    def count_inversions(self, board):
        """Conta inversÃµes no tabuleiro (usado para verificar se Ã© solucionÃ¡vel)."""
        flat = self.flatten(board)
        inversions = 0
        for i in range(len(flat)):
            for j in range(i+1, len(flat)):
                if flat[i] > flat[j]:
                    inversions += 1
        return inversions

    def is_solvable(self, initial, target):
        """Verifica se o tabuleiro inicial pode ser resolvido para o estado final."""
        return (self.count_inversions(initial) % 2) == (self.count_inversions(target) % 2)

    def find_empty(self, board=None):
        """Encontra a posiÃ§Ã£o do espaÃ§o vazio (0) no tabuleiro."""
        if board is None:
            board = self.board
        for i in range(3):
            for j in range(3):
                if board[i][j] == 0:
                    return i, j
        return None

    def move(self, direction):
        """Move uma peÃ§a na direÃ§Ã£o especificada."""
        x, y = self.find_empty()
        moved = False

        if direction == 'up' and x < 2:
            self.board[x][y], self.board[x+1][y] = self.board[x+1][y], self.board[x][y]
            moved = True
        elif direction == 'down' and x > 0:
            self.board[x][y], self.board[x-1][y] = self.board[x-1][y], self.board[x][y]
            moved = True
        elif direction == 'left' and y < 2:
            self.board[x][y], self.board[x][y+1] = self.board[x][y+1], self.board[x][y]
            moved = True
        elif direction == 'right' and y > 0:
            self.board[x][y], self.board[x][y-1] = self.board[x][y-1], self.board[x][y]
            moved = True

        if moved:
            self.moves += 1
            self.mostrar_tabuleiro()
            print(f"Movimentos: {self.moves}")
            if self.is_solved():
                print(f"ðŸŽ‰ ParabÃ©ns! Atingiu a configuraÃ§Ã£o final em {self.moves} movimentos! ðŸŽ‰")
                keyboard.unhook_all()

    def is_solved(self):
        """Verifica se o tabuleiro atual Ã© igual ao tabuleiro alvo."""
        return self.board == self.target_board
    
    def play(self):
        """Permite jogar no modo manual ou automÃ¡tico."""
        mode = input("Escolha o modo (M para manual, A para automÃ¡tico): ").strip().upper()
        if mode == "M":
            print("Modo manual: Use as setas direcionais para mover o espaÃ§o vazio (0). Pressione ESC para sair.")
            keyboard.on_press_key("up", lambda _: self.move('up'))
            keyboard.on_press_key("down", lambda _: self.move('down'))
            keyboard.on_press_key("left", lambda _: self.move('left'))
            keyboard.on_press_key("right", lambda _: self.move('right'))
            while not self.is_solved():
                if keyboard.is_pressed("esc"):
                    print("Jogo encerrado.")
                    break
            if self.is_solved():
                self.mostrar_tabuleiro()
                print(f"ðŸŽ‰ ParabÃ©ns! Atingiu a configuraÃ§Ã£o final em {self.moves} movimentos! ðŸŽ‰")
        else:
            print("Modo invÃ¡lido.")

if __name__ == "__main__":
    game = EightPuzzle()
    game.play()
