Relatório – Resolução do 8-Puzzle
1. Descrição do Puzzle
O 8-Puzzle é um quebra-cabeça deslizante composto por 8 peças numeradas (de 1 a 8) distribuídas em um tabuleiro 3x3, onde uma posição é deixada vazia (representada por 0 ou espaço em branco). O objetivo do jogo é transformar uma configuração inicial em uma configuração final (objetivo) através de movimentos válidos, deslizando as peças para ocupar a posição vazia. A natureza do puzzle gera um espaço de estados finito, porém com complexidade combinatória considerável, o que torna sua resolução um problema clássico de busca em inteligência artificial.

2. Descrição dos Algoritmos Implementados
O código contempla diferentes abordagens para a resolução do puzzle:

Modo Manual:
Permite que o usuário mova as peças utilizando as setas do teclado. Cada movimento é executado interativamente e o número de movimentos é contabilizado.

Modo Automático:
O usuário pode escolher entre três algoritmos para resolver o puzzle automaticamente:

A* com Heurística Manhattan:
Utiliza a soma das distâncias horizontais e verticais de cada peça até sua posição correta na configuração alvo. Esta heurística é admissível e consistente, fornecendo uma boa orientação e, normalmente, gerando a solução ótima com eficiência.

A* com Heurística Hamming:
Calcula o número de peças fora de posição (desconsiderando o espaço vazio). Embora também seja admissível, esta heurística é menos informativa que a Manhattan, o que pode levar a uma expansão maior de nós durante a busca.

Busca em Largura (BFS):
Explora os estados do puzzle de forma nivelada (por camadas), garantindo encontrar a solução com o menor número de movimentos (solução ótima em termos de custo uniforme). Entretanto, BFS pode se tornar impraticável em termos de tempo e memória para estados com profundidade maior, devido à explosão combinatória do espaço de estados.

3. Principais Características de Cada Algoritmo
A* com Manhattan
Optimalidade: Garante encontrar a solução ótima, desde que a heurística seja admissível e consistente (o que é o caso da Manhattan).
Completude: É completo, desde que o espaço de estados seja finito.
Complexidade: Em geral, a complexidade é exponencial no pior caso; contudo, a boa orientação da heurística Manhattan costuma reduzir significativamente o número de nós expandidos na prática.
A* com Hamming
Optimalidade: Também encontra a solução ótima, pois a heurística Hamming é admissível.
Completude: Completo para espaços finitos.
Complexidade: Pode ser menos eficiente que a Manhattan, pois a contagem de peças fora do lugar fornece uma estimativa menos refinada do custo restante, aumentando o número de estados explorados.
Busca em Largura (BFS)
Optimalidade: Garante encontrar a solução com o menor número de movimentos, pois explora o espaço de estados de forma ordenada por profundidade.
Completude: É completo para espaços de estados finitos.
Complexidade: Apresenta uma complexidade de tempo e espaço exponencial; embora seja simples de implementar e garantir a optimalidade, o uso intensivo de memória torna-o inviável para instâncias mais complexas do puzzle.
4. Combinações Testadas e Respectivas Respostas
Foram realizados testes com diferentes configurações (máximo de 5 pares de Input/Output). Alguns exemplos ilustrativos são:

Exemplo 1

Input (Configuração Inicial):
Copiar
Editar
1 2 3
4 5 6
7 0
Input (Configuração Final):
Copiar
Editar
1 2 3
4 5 6
7 8
Output Esperado:
Solução simples com um movimento ("right") para posicionar a peça 8 corretamente.
Exemplo 2

Input (Inicial):
Copiar
Editar
1 3 6
5 0 2
4 7
Input (Final):
Copiar
Editar
1 2 3
4 5 6
7 8
Output Esperado:
Sequência de movimentos composta por vários passos (ex.: "down -> left -> up -> right ..."), conforme determinado pelos algoritmos A* ou BFS.
Exemplo 3

Input (Inicial):
Copiar
Editar
2 3 6
1 5 0
4 7
Input (Final):
Copiar
Editar
1 2 3
4 5 6
7 8
Output Esperado:
Uma solução com uma sequência de movimentos mais longa, onde os algoritmos demonstram diferenças em termos de nós expandidos.
Exemplo 4

Input (Inicial):
Copiar
Editar
2 8 3
1 6 4
7 0
Input (Final):
Copiar
Editar
1 2 3
8 0 4
7 6
Output Esperado:
A solução encontrada pode variar entre os algoritmos, mas em geral o A* com Manhattan tende a encontrar a solução de forma mais eficiente.
Exemplo 5

Input (Inicial):
Copiar
Editar
8 6 7
2 5 4
3 0
Input (Final):
Copiar
Editar
1 2 3
8 0 4
7 6
Output Esperado:
Este exemplo, de maior complexidade, evidencia a diferença entre as heurísticas e a abordagem BFS, tanto em número de movimentos quanto em custo computacional.
5. Estudo de Custo de Tempo e Memória
BFS:
Apesar de garantir a solução ótima em termos de número de movimentos, BFS pode explorar um grande número de estados, especialmente em puzzles com maior profundidade. Isso implica um alto custo em tempo de execução e consumo de memória, já que a fila de estados cresce exponencialmente.

A* com Hamming:
Utiliza uma heurística mais simples, o que pode levar a uma maior expansão de nós em comparação com a Manhattan. Consequentemente, embora seja mais eficiente que a BFS em muitos casos, seu desempenho pode ser inferior à versão Manhattan em puzzles mais complexos.

A* com Manhattan:
A heurística Manhattan tende a ser mais informativa, direcionando a busca de forma mais eficiente. Na prática, isso resulta em menor tempo de execução e uso reduzido de memória, pois menos nós são expandidos até alcançar a solução.

Em testes empíricos (executados com instâncias variadas do puzzle), observou-se que o A* com Manhattan frequentemente supera as demais abordagens em termos de desempenho, especialmente em puzzles de complexidade mediana a alta.

6. Discussão dos Resultados
Eficiência e Otimalidade:
Todos os algoritmos garantem, em princípio, a optimalidade (encontram a solução com o menor número de movimentos). No entanto, a eficiência em termos de tempo e memória varia significativamente. O A* com Manhattan se destaca por sua heurística mais informada, enquanto o BFS, apesar de ser simples e garantido para encontrar a solução ótima, torna-se inviável para estados com maior profundidade devido ao consumo elevado de recursos.

Escalabilidade:
Em casos onde o puzzle exige uma sequência maior de movimentos, as abordagens A* demonstram melhor escalabilidade em comparação com a BFS. A escolha da heurística tem impacto direto na quantidade de nós explorados e, consequentemente, na performance do algoritmo.

Aplicabilidade:
Para aplicações práticas e instâncias reais do 8-Puzzle, o A* com Manhattan é, na maioria dos cenários, a melhor escolha. Entretanto, para puzzles simples ou para fins didáticos, a implementação da BFS pode ser suficiente para demonstrar os conceitos de busca em grafos.

7. Conclusões Principais
Versatilidade do Código:
O sistema implementado oferece modos interativos (manual) e automáticos, permitindo ao usuário tanto experimentar o puzzle quanto analisar a performance dos algoritmos de busca.

Importância da Heurística:
A comparação entre A* com Manhattan e A* com Hamming evidencia que uma heurística mais informada (como a Manhattan) pode reduzir significativamente o espaço de busca, levando a soluções mais rápidas e com menor consumo de memória.

Trade-off entre Simplicidade e Desempenho:
Embora a BFS seja simples e garanta a solução ótima, seu alto custo computacional em problemas mais complexos reforça a necessidade de heurísticas eficientes em algoritmos de busca como o A*.

Aplicação em Problemas Reais:
As lições aprendidas neste trabalho podem ser aplicadas a outros problemas de busca e planejamento em inteligência artificial, onde a escolha de uma heurística adequada é fundamental para o desempenho do algoritmo.